message ( STATUS "" )
message ( STATUS " _..::: Configuring Providers :::.._ " )
message ( STATUS "" )

#______________________________________________________________________
# Select build type for user modules. User modules can be build as an
# archive static library ( STATIC option ), as a dynamically loaded
# library ( SHARED option ) or as a run-time dynamically loaded library 
# ( MODULE option ).

set ( ModuleBuildType STATIC CACHE STRING 
        "Choose build type for user modules. Available options are STATIC, SHARED and MODULE" )

if ( "x${ModuleBuildType}x" STREQUAL "xx" )
  message ( FATAL_ERROR "ModuleBuildType is not set!" )
elseif ( (NOT "${ModuleBuildType}" STREQUAL "STATIC") AND
         (NOT "${ModuleBuildType}" STREQUAL "SHARED") AND
         (NOT "${ModuleBuildType}" STREQUAL "MODULE") )
  message ( FATAL_ERROR "ModuleBuildType should be one of the following: STATIC, SHARED or MODULE" )
endif ( "x${ModuleBuildType}x" STREQUAL "xx" )



#________________________________________________________________
# Write provider registry file in case of static module building,
# else create an empty file because the file is always included
# by the architecture

if ( "${ModuleBuildType}" STREQUAL "STATIC" )
    file ( WRITE  providerRegistry.h   "/*************************************************************  \n" )
    file ( APPEND providerRegistry.h   "****** WARNING AUTOGENERATED FILE - DO NOT EDIT MANUALLY *****  \n" )
    file ( APPEND providerRegistry.h   "*************************************************************/  \n" )
else( "${ModuleBuildType}" STREQUAL "STATIC" )
    file ( WRITE  providerRegistry.h   "/*************************************************************  \n" )
    file ( APPEND providerRegistry.h   "********* WARNING AUTOGENERATED FILE - DO NOT DELETE *********  \n" )
    file ( APPEND providerRegistry.h   "*************************************************************/  \n" )
endif ( "${ModuleBuildType}" STREQUAL "STATIC" )



#___________________________________________________________
# Autodetect user modules and add them to the building tree.

file ( GLOB FilesInDir . * )

foreach ( afile ${FilesInDir} )
    if ( IS_DIRECTORY ${afile} )
        set ( theSubDirs ${theSubDirs}  ${afile}  )
        message ( STATUS "Module ${afile} detected and added to the building tree" )
    endif ( IS_DIRECTORY ${afile} )
endforeach ( afile )


foreach ( subdir ${theSubDirs} )
    add_subdirectory( ${subdir} )
endforeach ( subdir ${theSubDirs} )


#________________________________________________________
# Back propagate TargetLinkLibraries variable in order to 
# make available the library names to the linker. This is 
# needed in both STATIC and SHARED built modules but not 
# for "MODULE" modules.

if ( ("${ModuleBuildType}" STREQUAL "STATIC") OR 
        ("${ModuleBuildType}" STREQUAL "SHARED") )

    set ( ModuleLibraries ${ModuleLibraries} PARENT_SCOPE)

endif ( ("${ModuleBuildType}" STREQUAL "STATIC") OR 
        ("${ModuleBuildType}" STREQUAL "SHARED") )

